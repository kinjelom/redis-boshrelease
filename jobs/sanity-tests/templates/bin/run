#!/bin/bash
set -uo pipefail

export PATH=$PATH:/var/vcap/packages/redis/bin

<%-
  port = link('redis').p('redis.port')
  master = link("redis").instances.find { |r| r.bootstrap }.address
  begin
    node = link("redis").instances.find { |r| !r.bootstrap }
    replica = node.address
  rescue
    replica = ""
  end

  admin_user = link('redis').p('redis.admin.user')
  admin_pass = link('redis').p('redis.admin.password')

  repl_enabled = "false"
  repl_user = ""
  repl_pass = ""
  link("redis").if_p("redis.replication.enabled") do |enabled|
    if enabled
      repl_enabled = "true"
      repl_user = link('redis').p('redis.replication.user')
      repl_pass = link('redis').p('redis.replication.password')
    end
  end

  test_key="sanity-tests-app:rats"
-%>
REPL_ENABLED='<%= repl_enabled %>'
EXITSTATUS=0

run_ok() {
  "$@"
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "FAILED: $* (rc=$rc)"
    EXITSTATUS=1
  fi
}

run_fail() {
  "$@" >/dev/null 2>/dev/null
  rc=$?
  if [ $rc -eq 0 ]; then
    echo "FAILED (expected fail but rc=$rc): $*"
    EXITSTATUS=1
  fi
}

echo "-----"
echo "TEST: Write/read on master as admin"
run_ok redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a '<%= admin_pass %>' del '<%= test_key %>'  > /dev/null
run_ok redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a '<%= admin_pass %>' set '<%= test_key %>' testing  > /dev/null
val="$(redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a '<%= admin_pass %>' get '<%= test_key %>')"
if [[ "$val" == "testing" ]]; then
  echo "PASSED"
else
  echo "FAILED"; EXITSTATUS=1
fi

echo "-----"
echo "TEST: Read from replica as admin"
if [[ "$REPL_ENABLED" == "true" ]]; then
  val="$(redis-cli -e -h '<%= replica %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a '<%= admin_pass %>' get '<%= test_key %>')"
  if [[ "$val" == "testing" ]]; then
    echo "PASSED"
  else
    echo "FAILED"; EXITSTATUS=1
  fi
else
  echo "SKIPPED: Replication disabled"
fi

echo "-----"
echo "TEST: Wrong password should fail, WRONGPASS expected"
run_fail redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a "wrong-pass" set '<%= test_key %>' testing
if [ $EXITSTATUS -eq 0 ]; then
  echo "PASSED"
else
  echo "FAILED"
fi

echo "-----"
echo "TEST: No auth should fail, NOAUTH expected when default off"
run_fail redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning get '<%= test_key %>'
if [ $EXITSTATUS -eq 0 ]; then
  echo "PASSED"
else
  echo "FAILED"
fi

echo "-----"
echo "TEST: Master role sanity"
role="$(redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= admin_user %>' -a '<%= admin_pass %>' ROLE | head -1)"
if [[ "$role" == "master" ]]; then
  echo "PASSED: Master role ($role) OK"
else
  echo "FAILED: master role = $role"; EXITSTATUS=1;
fi

echo "-----"
echo "TEST: Replica role sanity"
if [[ "$REPL_ENABLED" == "true" ]]; then
  role="$(redis-cli -e -h '<%= replica %>' -p <%= port %> --no-auth-warning --user '<%= repl_user %>' -a '<%= repl_pass %>' ROLE | head -1 || true)"
  if [[ "$role" == "slave" || "$role" == "replica" ]]; then
    echo "PASSED: Replica role ($role) OK"
  else
    echo "FAILED: replica role = $role"; EXITSTATUS=1
  fi
else
  echo "SKIPPED: Replication disabled"
fi

echo "-----"
echo "TEST: Replication user must NOT run data commands"
if [[ "$REPL_ENABLED" == "true" ]]; then
  run_fail redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= repl_user %>' -a '<%= repl_pass %>' set '<%= test_key %>' nope
  run_fail redis-cli -e -h '<%= master %>' -p <%= port %> --no-auth-warning --user '<%= repl_user %>' -a '<%= repl_pass %>' get '<%= test_key %>'
  if [ $EXITSTATUS -eq 0 ]; then
    echo "PASSED"
  else
    echo "FAILED"
  fi
else
  echo "SKIPPED: Replication disabled"
fi

echo "-----"
echo "Exit with status: $EXITSTATUS"
exit $EXITSTATUS
